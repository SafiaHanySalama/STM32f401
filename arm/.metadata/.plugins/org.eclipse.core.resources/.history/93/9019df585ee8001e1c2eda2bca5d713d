/******************************************************************************
 *
 * Module: 
 *
 * File Name: nvic.c
 *
 * Description: 
 *
 * Author: Safia Hany
 * 
 * Date:  Mar 15, 2024
 ******************************************************************************/
#include "nvic.h"

#define NVIC_BASE_ADDRESS           0xE000E100
#define SCB_BASE_ADDRESS            0xE000ED00
#define GET_REG_NUM_SHIFT			5
#define GET_IRQn_BIT_MASK			0x1F
typedef struct
{
	uint32 ISER[8];
	uint32 Reserved1[24];
	uint32 ICER[8];
	uint32 Reserved2[24];
	uint32 ISPR[8];
	uint32 Reserved3[24];
	uint32 ICPR[8];
	uint32 Reserved4[24];
	uint32 IABR[8];
	uint32 Reserved5[56];
	uint8 IP[240];
	uint32 Reserved6[644];
	uint32 STIR;
}NVIC_PERI_t;

typedef struct
{
	uint32 CPUID;
	uint32 ICSR;
	uint32 VTOR;
	uint32 AIRCR;
	uint32 SCR;
	uint32 CCR;
	uint8 SHP[12];
	uint32 SHCSR;
	uint32 CFSR;
	uint32 HFSR;
	uint32 reserved;
	uint32 MMAR;
	uint32 BFAR;
	uint32 AFSR;
} SCB_PERI_t;

volatile NVIC_PERI_t *const NVIC = (volatile NVIC_PERI_t *)NVIC_BASE_ADDRESS;
volatile SCB_PERI_t *const SCB = (volatile SCB_PERI_t *)SCB_BASE_ADDRESS;

void NVIC_EnableIRQ(IRQn_t IRQn)
{
	/*  NVIC->ISER[(IRQn >> 5)] = (1 << (IRQn & 0x1F));  enable interrupt
	 *  (uint32)((int32_t)IRQn) >> GET_REG_NUM_SHIFT
	 *  is IRQn >> 5 Means division by 2^5 which is 32
	 *  IRQn & 0x1F Means reminder 32*/
	NVIC->ISER[(uint32)((int32_t)IRQn) >> GET_REG_NUM_SHIFT] = (uint32)(1 << ((uint32)((int32_t)IRQn) & (uint32)GET_IRQn_BIT_MASK)); /* enable interrupt */
}

void NVIC_DisableIRQ(IRQn_t IRQn)
{
  NVIC->ICER[((uint32)(IRQn) >> GET_REG_NUM_SHIFT)] = (1 << ((uint32)(IRQn) & GET_IRQn_BIT_MASK)); /* disable interrupt */
}

uint32 NVIC_GetPendingIRQ(IRQn_t IRQn)
{
  return((uint32) ((NVIC->ISPR[(uint32)(IRQn) >> GET_REG_NUM_SHIFT] & (1 << ((uint32)(IRQn) & GET_IRQn_BIT_MASK)))?1:0)); /* Return 1 if pending else 0 */
}

void NVIC_SetPendingIRQ(IRQn_t IRQn)
{
  NVIC->ISPR[((uint32)(IRQn) >> 5)] = (1 << ((uint32)(IRQn) & 0x1F)); /* set interrupt pending */
}

void NVIC_ClearPendingIRQ(IRQn_t IRQn)
{
  NVIC->ICPR[((uint32)(IRQn) >> 5)] = (1 << ((uint32)(IRQn) & 0x1F)); /* Clear pending interrupt */
}
void NVIC_SetPriority(IRQn_t IRQn, uint32 priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}


/** \brief  Get Interrupt Priority

    The function reads the priority of an interrupt. The interrupt
    number can be positive to specify an external (device specific)
    interrupt, or negative to specify an internal (core) interrupt.


    \param [in]   IRQn  Interrupt number.
    \return             Interrupt Priority. Value is aligned automatically to the implemented
                        priority bits of the microcontroller.
 */
 uint32 NVIC_GetPriority(IRQn_t IRQn)
{

  if(IRQn < 0) {
    return((uint32)(SCB->SHP[((uint32)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
  else {
    return((uint32)(NVIC->IP[(uint32)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
}


/** \brief  Encode Priority

    The function encodes the priority for an interrupt with the given priority group,
    preemptive priority value, and subpriority value.
    In case of a conflict between priority grouping and available
    priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.

    \param [in]     PriorityGroup  Used priority group.
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
 uint32 NVIC_EncodePriority (uint32 PriorityGroup, uint32 PreemptPriority, uint32 SubPriority)
{
  uint32 PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32 PreemptPriorityBits;
  uint32 SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}


/** \brief  Decode Priority

    The function decodes an interrupt priority value with a given priority group to
    preemptive priority value and subpriority value.
    In case of a conflict between priority grouping and available
    priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.

    \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
    \param [in]     PriorityGroup  Used priority group.
    \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
    \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
 void NVIC_DecodePriority (uint32 Priority, uint32 PriorityGroup, uint32* pPreemptPriority, uint32* pSubPriority)
{
  uint32 PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32 PreemptPriorityBits;
  uint32 SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
}
